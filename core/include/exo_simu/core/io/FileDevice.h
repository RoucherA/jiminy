///////////////////////////////////////////////////////////////////////////////
///
/// \brief Contains the File class to manipulate a file.
///
/// \copyright Wandercraft
///
///////////////////////////////////////////////////////////////////////////////

#ifndef WDC_SYSTEM_FILE_DEVICE_H
#define WDC_SYSTEM_FILE_DEVICE_H

// C++ STD
#include <string>

#include "exo_simu/core/io/AbstractIODevice.h"

namespace exo_simu
{
namespace core
{
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// \brief Class to manipulate a file.
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////
    class FileDevice : public AbstractIODevice
    {
    public:
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \brief Constructor.
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FileDevice(std::string const& filename = "");

        /////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \brief Destructor.
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual ~FileDevice();

        int64_t size() override;
        hresult_t seek(int64_t pos) override;
        int64_t pos() override;
        int64_t bytesAvailable() override;

        int64_t readData(void* data, int64_t dataSize) override;
        int64_t writeData(void const* data, int64_t dataSize) override;

        std::string const& name() const;

    protected:
        hresult_t doOpen(enum OpenMode mode) override;
        void doClose() override;

        std::string filename_;
        int32_t fileDescriptor_;  ///< File descriptor.
    };
}
}


#endif // WDC_FILESYSTEM_FILE_H
